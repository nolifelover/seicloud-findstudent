var sys = require('sys');
var fs = require('fs');
var logger = require('./logger');
var util = require('util');
var events = require('events');
var sleep = require('sleep');
var com = require('serialport');
var SerialPort = com.SerialPort;
var START_OF_TEXT = '\u0002';
var END_OF_TEXT   = '\u0003';
var parser = com.parsers.readline('\r\n' + END_OF_TEXT);
var id = '';

var Event = exports.Event = {
    Connected:'reader.connected',
    Disconnected:'reader.disconnected',
    Error: 'reader.error',
    Data:'reader.data',
    TagError:'reader.error.tag'
};

util.inherits(Reader, events.EventEmitter);

function Reader(port, name){
  this._port = port;
  this._isOpened = false;
  if (typeof(name)=="undefined") name="left";
  this._name = name;
  var self = this;
  function createConnection(){
    logger.debug("-- trying to open reader connection "+self._port);

    var verifyChecksum = function(data) {
      var i,
      j,
      r,
      ok = true;
      if (data.length !== 12) {
        return {error: true, message:'wrong data length'};
      }
      for (i = 0; i < 2; i++) {
        r = -1;
        for (j = (2 + i); j < (10 + i); j += 2) {
          if (r === -1) {
            r = parseInt(data.charAt(i), 16);
          }
          r = r ^ parseInt(data.charAt(j), 16);
        }
        ok = ok && (r === parseInt(data.charAt(10 + i), 16));
      }
      if (!ok) {
        return {error: true, message:'checksum mismatch'};
      }else{
        return {error: false, message:'correct rfid checksum'};
      }
    };

    var serialPort = new SerialPort(port, {
      baudrate: 9600,
      databits: 8,
      stopbits: 1,
      parity  : 'none',
      parser  : parser
    }, false); 

    serialPort.open(function () {
      logger.info("-- trying open "+self._port);
    });

    serialPort.on('open', function() {
      logger.debug("-- serial open port "+ port + " success");
      self._isOpened = true;
      self.emit(Event.Connected);
    });

    serialPort.on('close', function(err) {
      logger.debug("-- serial close port "+ port + " success");
      self._isOpened = false;
      self.emit(Event.Disconnected);
    });

    serialPort.on('data', function(data){
      logger.debug('---- debug: read TAG ' + data);
      if (data.charAt(0) === START_OF_TEXT) {
        data = data.substring(1);
      }
      var checksum = verifyChecksum(data);
      if(!checksum.error){
        result = {code: 1, tag: data, time: new Date(), name: self._name}
        self.emit(Event.Data, result);
      }else{
        result = {code: -1, msg: checksum.message, size: data.length}
        logger.debug(""+result.msg);
        self.emit(Event.TagError, result);
      }
    });

    serialPort.on('error',function(err){
      logger.error("-- error to connect reader ("+err.message+")");
      logger.debug("-- waiting 2s to reconnect");
      sleep.sleep(2);
      createConnection();
    });
  }
  createConnection();
}

exports.Reader   = Reader;
exports.init  = function(port) {
  return new Reader(port);
};
//exports = module.exports = Reader;